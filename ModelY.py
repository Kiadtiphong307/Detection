import cv2
import numpy as np
import time
from ultralytics import YOLO
from collections import defaultdict
import torch

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8 ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
model = YOLO("yolov8n.pt")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
model.to('cuda' if torch.cuda.is_available() else 'cpu')  # ‡πÉ‡∏ä‡πâ GPU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
rtsp_url = "rtsp://admin:csmju-12345@192.168.1.108:554/cam/realmonitor?channel=1&subtype=0"
cap = cv2.VideoCapture(0)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)
cap.set(cv2.CAP_PROP_FPS, 25)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ FPS ‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ HEVC
cap.set(cv2.CAP_PROP_BUFFERSIZE, 5)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° buffer size ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc('H', '2', '6', '5'))  

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
if not cap.isOpened():
    print("Error: Could not open camera")
    exit()

# ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ line_position ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
counting_area = {
    'x1': 100,  # ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Å‡∏ô x
    'y1': 400,  # ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Å‡∏ô y
    'x2': 1150,  # ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏Å‡∏ô x
    'y2': 700   # ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏Å‡∏ô y
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def point_in_area(x, y, area):
    return area['x1'] < x < area['x2'] and area['y1'] < y < area['y2']

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô Counting Line
line_position = 550  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
offset = 10  # ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
entry_count = 0  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤
exit_count = 0  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å
people_in_room = 0  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥
light_status = False  # ‡πÑ‡∏ü‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏¥‡∏î
last_entry_time = None  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤

# Dictionary ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
tracked_objects = defaultdict(lambda: {"previous": None, "current": None})

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ frame
frame_skip = 2  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏∏‡∏Å 2 ‡πÄ‡∏ü‡∏£‡∏°
frame_count = 0

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
cv2.namedWindow("Line Crossing Detection", cv2.WINDOW_NORMAL)
cv2.resizeWindow("Line Crossing Detection", 1920, 1080)


while cap.isOpened():
    for _ in range(2):  # ‡∏Ç‡πâ‡∏≤‡∏° frame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ frame dropping
        ret = cap.grab()
        if not ret:
            break
    
    ret, frame = cap.retrieve()  # ‡∏≠‡πà‡∏≤‡∏ô frame ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    if not ret:
        print("Error reading frame")
        time.sleep(0.5)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        continue

    frame_count += 1
    if frame_count % frame_skip != 0:
        continue

    
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ü‡∏£‡∏°
    height, width = frame.shape[:2]
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏ß‡∏¢ YOLO
    results = model(frame, conf=0.6)
    
    for result in results:
        for i, box in enumerate(result.boxes):
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            conf = float(box.conf[0])
            cls = int(box.cls[0])

            if cls == 0 and conf > 0.6:
                center_x = int((x1 + x2) / 2)
                center_y = int((y1 + y2) / 2)

                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ô‡πÄ‡∏™‡πâ‡∏ô
                current_in_area = point_in_area(center_x, center_y, counting_area)
                tracked_objects[i]["previous"] = tracked_objects[i]["current"]
                tracked_objects[i]["current"] = current_in_area

                if tracked_objects[i]["previous"] is not None:
                    if not tracked_objects[i]["previous"] and tracked_objects[i]["current"]:
                        # ‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                        entry_count += 1
                        people_in_room += 1
                        last_entry_time = time.time()
                        light_status = True
                        print("[üîµ] ‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ | ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü ‚úÖ")

                    elif tracked_objects[i]["previous"] and not tracked_objects[i]["current"]:
                        # ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                        exit_count += 1
                        if people_in_room > 0:
                            people_in_room -= 1
                        print("[üî¥] ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å")

                # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                color = (0, 255, 0) if not current_in_area else (0, 0, 255)
                cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                cv2.circle(frame, (center_x, center_y), 5, color, -1)
                
                label = f"Person {i+1} ({conf:.2f})"
                cv2.putText(frame, label, (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    # ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ô
    cv2.rectangle(frame, 
                 (counting_area['x1'], counting_area['y1']), 
                 (counting_area['x2'], counting_area['y2']), 
                 (255, 0, 0), 2)

    # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 30 ‡∏ô‡∏≤‡∏ó‡∏µ
    if light_status and last_entry_time and (time.time() - last_entry_time > 1800):
        light_status = False
        print("[‚ö†Ô∏è] ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ñ‡∏£‡∏ö) ‚ùå")

    # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô
    if people_in_room == 0 and light_status:
        light_status = False
        print("[‚ö†Ô∏è] ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ | ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü ‚ùå")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô
    text1 = f"Entry: {entry_count} | Exit: {exit_count} | People: {people_in_room} | Light: {'ON' if light_status else 'OFF'}"
    cv2.putText(frame, text1, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°
    cv2.imshow("Line Crossing Detection", frame)

    # ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
