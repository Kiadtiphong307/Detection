import cv2
import numpy as np
import time
from ultralytics import YOLO
from collections import defaultdict

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8 ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
model = YOLO("yolov8n.pt")  # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ "yolov8l.pt" ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô

cap = cv2.VideoCapture("rtsp://admin:csmju-12345@192.168.1.108:554/cam/realmonitor?channel=1&subtype=0")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô Counting Line
line_position = 300  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
offset = 10  # ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
entry_count = 0  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤
exit_count = 0  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å
people_in_room = 0  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥
light_status = False  # ‡πÑ‡∏ü‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏¥‡∏î
last_entry_time = None  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤

# Dictionary ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
tracked_objects = defaultdict(lambda: {"previous": None, "current": None})

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ YOLOv8
    results = model(frame)

    for result in results:
        for i, box in enumerate(result.boxes):
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            conf = float(box.conf[0])
            cls = int(box.cls[0])

            if cls == 0 and conf > 0.6:  # ‡πÉ‡∏ä‡πâ Threshold ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î False Positive
                center_x = int((x1 + x2) / 2)
                center_y = int((y1 + y2) / 2)

                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÉ‡∏ô Dictionary
                tracked_objects[i]["previous"] = tracked_objects[i]["current"]
                tracked_objects[i]["current"] = center_y

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å
                if tracked_objects[i]["previous"] is not None:
                    if tracked_objects[i]["previous"] < line_position and center_y >= line_position:
                        # ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤
                        entry_count += 1
                        people_in_room += 1
                        last_entry_time = time.time()
                        light_status = True  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü
                        print("[üîµ] ‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ | ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü ‚úÖ")

                    elif tracked_objects[i]["previous"] >= line_position and center_y < line_position:
                        # ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å
                        exit_count += 1
                        if people_in_room > 0:
                            people_in_room -= 1
                        print("[üî¥] ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å")

                # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏Ñ‡∏ô
                color = (0, 255, 0) if center_y < line_position else (0, 0, 255)
                cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                cv2.circle(frame, (center_x, center_y), 5, color, -1)

    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ô
    cv2.line(frame, (0, line_position), (frame.shape[1], line_position), (255, 0, 0), 2)

    # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 30 ‡∏ô‡∏≤‡∏ó‡∏µ
    if light_status and last_entry_time and (time.time() - last_entry_time > 1800):
        light_status = False
        print("[‚ö†Ô∏è] ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ñ‡∏£‡∏ö) ‚ùå")

    # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô
    if people_in_room == 0 and light_status:
        light_status = False
        print("[‚ö†Ô∏è] ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ | ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü ‚ùå")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    text = f"Entry: {entry_count} | Exit: {exit_count} | People: {people_in_room} | Light: {'ON' if light_status else 'OFF'}"
    cv2.putText(frame, text, (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    frame_resized = cv2.resize(frame, (1280, 720))
    cv2.imshow("Line Crossing Detection", frame_resized)

    # ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break



cap.release()
cv2.destroyAllWindows()
